React.js
=> install react with vite/ Bun
=> react version 19
=> delete dependecies from package.jsona and run commands
   . npm install react@rc
   . npm i react-dom@rc
 
=> folder structure
=> naming convension
 . camelCase
 . PascalCase  (for components)
 . snake_case
 . Kebab-case (filesnames,css classes names, id names)

=> JSX=>javascript XML , and it allows to qrite HTML into Javascript
 
=> Babel => (behind the scene browser didt understand JSX)
The compiler that is used to convert the React code into js  
----------------------------------------------------------------

components => functons that returns JSX
-> Class based components => this is how components were created at start
-> functional based components => modern way of writing JSX
sadam.js to Sadam.jsx
import / export
1-:default import and export => export default sadam
2-:Names import and export => export const sadammm=(){...} => import {sadammm,interview,multipleComponenets} from "../"
3-:Mixed import and export => import defaultNamed,{sadammm,multipleComponenets} from "../"

----------------------
safe us from duplication of code ? how ?  
what's the difference b/w simple html . boostrap code and react code 
power of components
---------------------------
React Fragments 
components can't return multiple elements without a wrapper div
1-: <React.Fragment> </React.Fragment>
2-: import { Fragment } from "react";
   <Fragment>
      <p>paragrpg</p>
      <h1>headin</h1>
   </Fragment>
3-: <div> </div>
shorthand syntax
4-: <> </>

------------------------
Loops in React.js
in react.js we dont use for,while and do-while looops 
we only use the map functions
-----------------------
Props is React.js
The properties , that provide the data from parent to childs
-------------------
Hooks -:
In React, hooks are functions that let you use state and other React features in functional components.
Before hooks, managing state and side effects required class components. Hooks allow you to use these features without needing classes,
making functional components more powerful and easier to work with.


As of React 18, there are 13 official hooks available. 
but few famous are here 1-: 

1-: useState
2-: useEffect
3-: useContext
4-: useReducer
5-: useCallback
6-: useMemo
7-: useRef

   Virtual DOM

Definition: 
The Virtual DOM is a lightweight copy of the actual DOM. 
Itâ€™s a concept implemented in React to improve performance by minimizing direct manipulation of the real DOM.

Virtual DOM Tree:
 When a component's state or props change, React creates a new Virtual DOM tree representing the updated UI.
Diffing Algorithm:
                  React compares the new Virtual DOM tree with the previous one using a diffing algorithm to 
determine which parts of the real DOM have changed.
Reconciliation: 
                 Only the changed parts are updated in the real DOM, rather than re-rendering the entire tree.
This process is called reconciliation and helps optimize performance.